import json
import random
import threading
import time
import pika
#?????
from kafka import KafkaProducer
from kafka.errors import KafkaError

############### RabbitMQ ######################################3#####

connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()


channel.queue_declare(queue='dispositivos')  #crea la cola

####simula peticioines!!!!!!!1####
for i in range(10):
    categoria = random.choice(['Cat1', 'Cat2', 'Cat3', 'Cat4', 'Cat5']) #las categorías de la preg5¿
    mensaje = f"{{'Categoria': '{categoria}', 'Mensaje': 'Peticion {i}'}}"

####Publica el mensaje en la cola 'dispositivos'!!!!!!! ####
channel.basic_publish(exchange='', routing_key='dispositivos', body=mensaje)
print(f"Mensaje enviado: {mensaje}")
connection.close()



##-------------Establece la conexión con el servidor-------------##
connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()

channel.queue_declare(queue='dispositivos')

def procesar_mensaje(ch, method, properties, body):
    mensaje = json.loads(body.decode())
    categoria = mensaje['Categoria']
    dispositivo_id = method.consumer_tag
    print(f"Mensaje recibido de Dispositivo {dispositivo_id}: {mensaje}")

#Establece el consumidor para la cola
channel.basic_consume(queue='dispositivos', on_message_callback=procesar_mensaje, auto_ack=True)
channel.start_consuming() ##!!!##

############## Kafka ?????????????????????#################################33#

bootstrap_servers = 'localhost:9092'
topic = 'dispositivos'

###Crea el productor de kafka###
producer = KafkaProducer(bootstrap_servers=bootstrap_servers,
                         value_serializer=lambda v: json.dumps(v).encode('utf-8'))

#########################################################################3###

class IoTDevice:
    def __init__(self, device_id, transmission_interval, category):
        self.device_id = device_id
        self.transmission_interval = transmission_interval
        self.category = category
        self.is_transmitting = False
        self.thread = None

    def start_transmission(self):
        self.is_transmitting = True
        self.thread = threading.Thread(target=self._transmit_data)
        self.thread.start()

    def stop_transmission(self):
        self.is_transmitting = False
        if self.thread is not None:
            self.thread.join()

    def _transmit_data(self):
        while self.is_transmitting:
            timestamp = int(time.time())
            value = random.random()
            data = {
                "Timestamp": timestamp,
                "Value": value
            }
            json_data = json.dumps(data)
            print(f"Device {self.device_id} ({self.category}): {json_data}")
            time.sleep(self.transmission_interval)

def simulate_iot_devices(num_devices, transmission_interval):
    devices = []


    categorias = ['Cat1', 'Cat2', 'Cat3', 'Cat4', 'Cat5']


#crea los servicios en orden
    for i in range(num_devices):
        categoria = random.choice(categorias)
        device = IoTDevice(i+1, transmission_interval, categoria)
        device.start_transmission()
        devices.append(device)
   #no se detiene la creación de servicios, a menos que se detenga manualmente 
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        pass

    for device in devices:
        device.stop_transmission()

#---pa probar---#
num_devices = 5
transmission_interval = 2

simulate_iot_devices(num_devices, transmission_interval)
